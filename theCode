package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous
public class BasicAutonomous extends LinearOpMode {

    DcMotor frontLeftMotor, frontRightMotor, backLeftMotor, backRightMotor;
    DcMotor armMotor;
    DcMotor horizontalSlideMotor, verticalSlideMotor;
    Servo specimenServo;
    Servo intakeServo;
    Servo clawServo;

    boolean isIntakeIn = false; // Indicates if intake is in or out

    @Override
    public void runOpMode() {

        // Initialize hardware
        frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
        frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
        backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
        backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");
        
        armMotor = hardwareMap.get(DcMotor.class, "armMotor");
        horizontalSlideMotor = hardwareMap.get(DcMotor.class, "horizontalSlideMotor");
        verticalSlideMotor = hardwareMap.get(DcMotor.class, "verticalSlideMotor");

        specimenServo = hardwareMap.get(Servo.class, "specimenServo");
        intakeServo = hardwareMap.get(Servo.class, "intakeServo");
        clawServo = hardwareMap.get(Servo.class, "clawServo");

        frontRightMotor.setDirection(DcMotor.Direction.REVERSE);
        backRightMotor.setDirection(DcMotor.Direction.REVERSE);

        
        waitForStart();

        // Autonomous actions
        moveForward(0.5, 2);
        grabSpecimen();
        moveForward(0.5, 3);
        placeSpecimen();
        moveBackward(0.5, 1);

       
        while (opModeIsActive()) {
            // Drive control using joystick inputs
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x * 1.1;
            double rx = gamepad1.right_stick_x;
            
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;

            //  motoar powers
            frontLeftMotor.setPower(frontLeftPower);
            backLeftMotor.setPower(backLeftPower);
            frontRightMotor.setPower(frontRightPower);
            backRightMotor.setPower(backRightPower);

            // Arm control that using lefta and tyhe right triggers;
            double armPower = gamepad1.right_trigger - gamepad1.left_trigger;
            armMotor.setPower(armPower);


            if (gamepad1.right_trigger > 0) {
                clawServo.setPosition(1);  // Open claw (assuming full open is 1)
            } else if (gamepad1.left_trigger > 0) {
                clawServo.setPosition(0);  // Close claw (assuming full closed is 0)
            }

            // Horizontal slide control
            if (gamepad1.a) {
                horizontalSlideMotor.setPower(0.25); // Move forward
            } else if (gamepad1.x) {
                horizontalSlideMotor.setPower(-0.25); // Move backward
            } else {
                horizontalSlideMotor.setPower(0); // Stop
            }

            // Vertical slide control
            if (gamepad1.b) {
                verticalSlideMotor.setPower(-0.5);  // Move down
            } else if (gamepad1.y) {
                verticalSlideMotor.setPower(0.5);   // Move up
            } else {
                verticalSlideMotor.setPower(0);     // Stop
            }

            // Intake control
            if (gamepad1.dpad_up) {
                if (!isIntakeIn) {
                    intakeServo.setPosition(0);  // Pulling
                    isIntakeIn = true;
                    telemetry.addData("Intake", "Pulling");
                }
            }
            if (gamepad1.dpad_down) {
                if (isIntakeIn) {
                    intakeServo.setPosition(1);  // Pushing
                    isIntakeIn = false;
                    telemetry.addData("Intake", "Pushing");
                }
            }

            // Telemetry data
            telemetry.addData("Front Left Power", frontLeftPower);
            telemetry.addData("Back Left Power", backLeftPower);
            telemetry.addData("Front Right Power", frontRightPower);
            telemetry.addData("Back Right Power", backRightPower);
            telemetry.addData("Arm Power", armPower);
            telemetry.update();
        }
    }

    // Autonomous movement methods
    private void moveForward(double power, double time) {
        setMotorPowers(power);
        sleep((long) (time * 1000));
        stopMotors();
    }

    private void moveBackward(double power, double time) {
        setMotorPowers(-power);
        sleep((long) (time * 1000));
        stopMotors();
    }

    private void grabSpecimen() {
        specimenServo.setPosition(0); // Close specimen servo
        sleep(1000);
    }

    private void placeSpecimen() {
        specimenServo.setPosition(1); // Open specimen servo
        sleep(1000);
    }

    private void setMotorPowers(double power) {
        frontLeftMotor.setPower(power);
        backLeftMotor.setPower(power);
        frontRightMotor.setPower(power);
        backRightMotor.setPower(power);
    }

    private void stopMotors() {
        frontLeftMotor.setPower(0);
        backLeftMotor.setPower(0);
        frontRightMotor.setPower(0);
        backRightMotor.setPower(0);
    }
}
